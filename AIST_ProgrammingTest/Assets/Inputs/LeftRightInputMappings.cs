//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Inputs/LeftRightInputMappings.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @LeftRightInputMappings: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @LeftRightInputMappings()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""LeftRightInputMappings"",
    ""maps"": [
        {
            ""name"": ""LeftRightInputMap"",
            ""id"": ""8166e45e-d8da-4a76-a3f3-4f097dbd219f"",
            ""actions"": [
                {
                    ""name"": ""LeftAction"",
                    ""type"": ""Button"",
                    ""id"": ""18b2d178-0af6-42d0-9d79-dcfff506ee72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightAction"",
                    ""type"": ""Button"",
                    ""id"": ""d0852c9a-3da3-49e1-8848-e34a3efa98f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b06bf0a6-f874-437d-9bdf-cfaf454fcd73"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec4e359a-e170-461d-b905-126625820591"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OpenCloseInputMap"",
            ""id"": ""6cfb52f9-2d22-4c46-ade1-ceea71db5ad0"",
            ""actions"": [
                {
                    ""name"": ""Open"",
                    ""type"": ""Button"",
                    ""id"": ""2471a113-a0d1-4dad-92ca-89ae327e7a94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""e71853c6-d732-496b-a21f-b793b2994a0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a65d2c7e-9b8e-4589-9548-67ddb3c084c1"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""598f7c53-111d-4d11-9012-e280a04d97fa"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LeftRightInputMap
        m_LeftRightInputMap = asset.FindActionMap("LeftRightInputMap", throwIfNotFound: true);
        m_LeftRightInputMap_LeftAction = m_LeftRightInputMap.FindAction("LeftAction", throwIfNotFound: true);
        m_LeftRightInputMap_RightAction = m_LeftRightInputMap.FindAction("RightAction", throwIfNotFound: true);
        // OpenCloseInputMap
        m_OpenCloseInputMap = asset.FindActionMap("OpenCloseInputMap", throwIfNotFound: true);
        m_OpenCloseInputMap_Open = m_OpenCloseInputMap.FindAction("Open", throwIfNotFound: true);
        m_OpenCloseInputMap_Close = m_OpenCloseInputMap.FindAction("Close", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LeftRightInputMap
    private readonly InputActionMap m_LeftRightInputMap;
    private List<ILeftRightInputMapActions> m_LeftRightInputMapActionsCallbackInterfaces = new List<ILeftRightInputMapActions>();
    private readonly InputAction m_LeftRightInputMap_LeftAction;
    private readonly InputAction m_LeftRightInputMap_RightAction;
    public struct LeftRightInputMapActions
    {
        private @LeftRightInputMappings m_Wrapper;
        public LeftRightInputMapActions(@LeftRightInputMappings wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftAction => m_Wrapper.m_LeftRightInputMap_LeftAction;
        public InputAction @RightAction => m_Wrapper.m_LeftRightInputMap_RightAction;
        public InputActionMap Get() { return m_Wrapper.m_LeftRightInputMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftRightInputMapActions set) { return set.Get(); }
        public void AddCallbacks(ILeftRightInputMapActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftRightInputMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftRightInputMapActionsCallbackInterfaces.Add(instance);
            @LeftAction.started += instance.OnLeftAction;
            @LeftAction.performed += instance.OnLeftAction;
            @LeftAction.canceled += instance.OnLeftAction;
            @RightAction.started += instance.OnRightAction;
            @RightAction.performed += instance.OnRightAction;
            @RightAction.canceled += instance.OnRightAction;
        }

        private void UnregisterCallbacks(ILeftRightInputMapActions instance)
        {
            @LeftAction.started -= instance.OnLeftAction;
            @LeftAction.performed -= instance.OnLeftAction;
            @LeftAction.canceled -= instance.OnLeftAction;
            @RightAction.started -= instance.OnRightAction;
            @RightAction.performed -= instance.OnRightAction;
            @RightAction.canceled -= instance.OnRightAction;
        }

        public void RemoveCallbacks(ILeftRightInputMapActions instance)
        {
            if (m_Wrapper.m_LeftRightInputMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftRightInputMapActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftRightInputMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftRightInputMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftRightInputMapActions @LeftRightInputMap => new LeftRightInputMapActions(this);

    // OpenCloseInputMap
    private readonly InputActionMap m_OpenCloseInputMap;
    private List<IOpenCloseInputMapActions> m_OpenCloseInputMapActionsCallbackInterfaces = new List<IOpenCloseInputMapActions>();
    private readonly InputAction m_OpenCloseInputMap_Open;
    private readonly InputAction m_OpenCloseInputMap_Close;
    public struct OpenCloseInputMapActions
    {
        private @LeftRightInputMappings m_Wrapper;
        public OpenCloseInputMapActions(@LeftRightInputMappings wrapper) { m_Wrapper = wrapper; }
        public InputAction @Open => m_Wrapper.m_OpenCloseInputMap_Open;
        public InputAction @Close => m_Wrapper.m_OpenCloseInputMap_Close;
        public InputActionMap Get() { return m_Wrapper.m_OpenCloseInputMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OpenCloseInputMapActions set) { return set.Get(); }
        public void AddCallbacks(IOpenCloseInputMapActions instance)
        {
            if (instance == null || m_Wrapper.m_OpenCloseInputMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OpenCloseInputMapActionsCallbackInterfaces.Add(instance);
            @Open.started += instance.OnOpen;
            @Open.performed += instance.OnOpen;
            @Open.canceled += instance.OnOpen;
            @Close.started += instance.OnClose;
            @Close.performed += instance.OnClose;
            @Close.canceled += instance.OnClose;
        }

        private void UnregisterCallbacks(IOpenCloseInputMapActions instance)
        {
            @Open.started -= instance.OnOpen;
            @Open.performed -= instance.OnOpen;
            @Open.canceled -= instance.OnOpen;
            @Close.started -= instance.OnClose;
            @Close.performed -= instance.OnClose;
            @Close.canceled -= instance.OnClose;
        }

        public void RemoveCallbacks(IOpenCloseInputMapActions instance)
        {
            if (m_Wrapper.m_OpenCloseInputMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOpenCloseInputMapActions instance)
        {
            foreach (var item in m_Wrapper.m_OpenCloseInputMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OpenCloseInputMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OpenCloseInputMapActions @OpenCloseInputMap => new OpenCloseInputMapActions(this);
    public interface ILeftRightInputMapActions
    {
        void OnLeftAction(InputAction.CallbackContext context);
        void OnRightAction(InputAction.CallbackContext context);
    }
    public interface IOpenCloseInputMapActions
    {
        void OnOpen(InputAction.CallbackContext context);
        void OnClose(InputAction.CallbackContext context);
    }
}
